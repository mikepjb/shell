" -- Spartan Vim Configuration - minimal setup for focused development
set nocompatible | filetype plugin indent on | syn on
set hid noswf nobk udf udir=~/.vim/undodir cb=unnamed,unnamedplus
set nu mouse=a nowrap nospell shm+=I tw=79 cc=+1 sb spr so=8 nolz
set hls is ignorecase scs ws gd gp=grep\ -rn\ $*\ . ts=2 sw=2 et ai
set backspace=indent,eol,start wmnu wim=longest:full,full wcm=<Tab> path=**
set wildoptions=pum,fuzzy
set ttm=50 wig=*.o,*.obj,*.pyc,*.swp,*.bak,*.class,*/.git/*,*/node_modules/*
let g:netrw_liststyle=3 | let g:netrw_banner=0 | let g:netrw_browse_split=4
au FileType netrw nno <buffer> S <C-^> | au FileType go setl ts=4 sw=4

" -- Appearance ---------------------------------------------------------------
colorscheme spartan | set ls=2 fcs+=stl:─,stlnc:─,vert:│
set stl=──\ %#User1#%f%*%<\ (%{&ft})%m%r%h%w\ %=\ (\ %3l,%3c\,%3p%%\ )

" -- Functions ----------------------------------------------------------------
fun! Tree()
  let tree_buf = bufnr('tree')
  if tree_buf != -1 | exe 'buffer' tree_buf | setl ma | %delete _
  else | enew | setl bt=nofile bh=hide noswf nonu ro | file tree | endif
  sil r !tree -a -I .git --gitignore --prune --noreport
  sil! g/^$/d
  norm! gg
  setl noma
endfun

fun! Format(fn)
  cclose | cexpr [] | normal w
  let l:output = system(a:fn . ' ' . shellescape(expand('%')))
  if v:shell_error | let l:lines = split(l:output, '\n') | cexpr l:lines | copen
  else | edit! | endif
endfun

fun! SynGroup()
  let l:s = synID(line('.'), col('.'), 1)
  echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

fun! s:SendTextToRepl(text)
  if empty(a:text) | return | endif
  let escaped = substitute(a:text, '"', '\\"', 'g')
  let cmd = 'if tmux list-windows | grep -q "^99:"; then tmux send-keys'
        \ . ' -t 99 "' . escaped . '" Enter; elif [ $(tmux display-message'
        \ . ' -p "#{window_panes}") -eq 2 ]; then tmux send-keys -t 2 "'
        \ . escaped . '" Enter; fi'
  call system(cmd)
endfun

fun! SendToRepl() range
  call s:SendTextToRepl(join(getline(a:firstline, a:lastline), "\n"))
endfun

fun! SendBufferToRepl() range
  call s:SendTextToRepl(join(getline(1, line('$')), "\n"))
endfun

fun! PromptAndSendToRepl()
  call s:SendTextToRepl(input("=> "))
endfun

function! FuzzyFind()
    let result = system('find . -type f -not -path "*/.git/*" -not -path "*/node_modules/*" -not -path "*/target/*" | fuzzy.sh')
    let result = substitute(result, '\n$', '', '')
    redraw!  " Force complete redraw
    if !empty(result)
        execute 'edit ' . fnameescape(result)
    endif
endfunction
command! Fuzzy call FuzzyFind()

" -- Bindings -----------------------------------------------------------------
ino <C-c> <Esc> | nno <C-g> :noh<CR><C-g> | nno <C-h> <C-w><C-h>
nno <C-j> <C-w><C-j> | nno <C-k> <C-w><C-k> | nno <C-l> <C-w><C-l>
nno <C-q> :q<CR>
nno Y y$
nno Q @q | nno S <C-^>
nno gD g<C-]> | nno <C-u> :call Tree()<CR> | nno gd <C-]>
nno ge :e <C-r>=len(expand('%:h')) ? expand('%:h') : getcwd()<CR>/
nno gi :e ~/.vimrc<CR> | nno gn :e ~/.tmp-notes<CR> | nno gr :grep<space>
nno go :copen<CR> | nno gj :cnext<CR> | nno gk :cprev<CR>
nno zA :call SynGroup()<CR>
vno gs :call SendToRepl()<CR>
nno gS :call SendBufferToRepl()<CR>
nno cqp :call PromptAndSendToRepl()<CR>
nno <space> :find *

command! TrimWhitespace %s/\s\+$//e
" -- Language -----------------------------------------------------------------
set tags=./tags
augroup SpartanConfig
  au!
  au FileType netrw nno <buffer> S <C-^> 
  au FileType go setl ts=4 sw=4
  au FileType javascript,typescript,html,css,yaml,json,ruby setl ts=2 sw=2
  au FileType go set tags+=~/.tags/go.tags
  au FileType clojure,java set tags+=~/.tags/clojure.tags,~/.tags/java.tags
  au FileType javascript,typescript set tags+=~/.tags/node.tags
  au FileType go setl formatprg=goimports\ -w
  au FileType templ setl formatprg=templ\ fmt\ -w
  au FileType go nno <buffer> gF :call Format("goimports -w")<CR>
  au FileType templ nno <buffer> gF :call Format("templ fmt -w")<CR>
augroup END
packadd matchit
